// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["backoffice"]
}

model SeoPost {
  id                Int         @id @default(autoincrement())
  title             String
  mainImageUrl      String?
  mainImageAlt      String?
  mainImageCaption  String?
  metaDescription   String
  metaKeywords      String[]
  content           String
  slug              String      @unique
  excerpt           String?
  published         Boolean     @default(false)
  status            PostStatus  @default(DRAFT)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  author            String
  authorLink        String?
  viewsCount        Int         @default(0)
  estimatedReadTime Int?
  category          SeoCategory @relation(fields: [categoryId], references: [id])
  categoryId        Int

  @@schema("backoffice")
}

model User {
  id            String    @id(map: "user_pkey") @db.VarChar(255)
  name          String    @db.VarChar(255)
  email         String    @unique(map: "user_email_key") @db.VarChar(255)
  emailVerified Boolean
  image         String?   @db.VarChar(255)
  role  Role   @default(READER)
  createdAt     DateTime  @db.Timestamp(6)
  updatedAt     DateTime  @db.Timestamp(6)
  accounts      Account[]
  sessions      Session[]

  @@map("User")
  @@schema("backoffice")
}

model Session {
  id        String   @id(map: "session_pkey") @db.VarChar(255)
  expiresAt DateTime @db.Timestamp(6)
  token     String   @unique(map: "session_token_key") @db.VarChar(255)
  createdAt DateTime @db.Timestamp(6)
  updatedAt DateTime @db.Timestamp(6)
  ipAddress String?  @db.VarChar(255)
  userAgent String?  @db.VarChar(255)
  userId    String   @db.VarChar(255)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "session_userId_fkey")

  @@index([userId], map: "session_userId_idx")
  @@map("Session")
  @@schema("backoffice")
}

model Account {
  id                    String    @id(map: "account_pkey") @db.VarChar(255)
  accountId             String    @db.VarChar(255)
  providerId            String    @db.VarChar(255)
  userId                String    @db.VarChar(255)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime? @db.Timestamp(6)
  refreshTokenExpiresAt DateTime? @db.Timestamp(6)
  scope                 String?   @db.VarChar(255)
  password              String?   @db.VarChar(255)
  createdAt             DateTime  @db.Timestamp(6)
  updatedAt             DateTime  @db.Timestamp(6)
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_userId_fkey")

  @@index([userId], map: "account_userId_idx")
  @@map("Account")
  @@schema("backoffice")
}

model SeoCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  posts       SeoPost[]

  @@schema("backoffice")
}

model UserWhiteListed {
  id    Int    @id @default(autoincrement())
  email String @unique

  @@schema("backoffice")
}

enum Role {
  ADMIN
  EDITOR
  READER

  @@schema("backoffice")
}

enum PostStatus {
  DRAFT
  PUBLISHED

  @@schema("backoffice")
}
